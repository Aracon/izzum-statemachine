@startuml
package izzum {
Class StateMachine {
  # states: State[]
  # transitions: Transition[]
  # context: Context
  + apply()
  + run()
  + runToCompletion()
}
Class State {
  # name: string
  # type:string
  #transitions: Transition[]
  + getName():string
  + getType():string
  +getTransitions():Transition[]
  +hasTransition(t):boolean
}
Class Transition {
#state_from:State
#state_to:State
#rule:string
#command:string
+can(Context)
+process(Context)
}
Class Context {
 #entity_id:string
 #builder: EntityBuilder
 #adapter: Adapter
 #statemachine:StateMachine
 +getEntity():*
 +getEntityId():string
 +getState():string
 +setState(state)
 +getBuilder():EntityBuilder
 +getAdapter():Adapter
}

Class EntityBuilder {
 #entity:*
 +getEntity(Context):*
 #build():*
}
package persistence {
  abstract Class Adapter {
    + getEntityIds():string[]
    + setState(Context)
    + getState(Context)
    + add(Context)
    # {abstract} processSetState(Context)
    # {abstract} processGetState(Context)
  }

  Class PDO {

  }

  Class Memory {

  }

  Class Session {

  }

}
package factory {
 abstract Class AbstractFactory {
+ getStateMachine(id):StateMachine
# {abstract} getLoader(): Loader
# {abstract} getPersistenceAdapter(): Adapter
# {abstract} getEntityBuilder(): EntityBuilder
# {abstract} getMachineName(): string
#createMachine(Context): StateMachine
#getContext(id): Context
+add(Context)
}
}

package loader {
Interface Loader {
  +load(StateMachine)
}
Class LoaderArray {
  +load(StateMachine)
}
}
package command {
  Class Command {
    +execute()
    #{abstract}_execute()
  }
}

package rules {
  Class Rule {
    +applies():boolean
    #{abstract}_applies():boolean
  }
}
StateMachine "1" o-- "n" State
StateMachine "1" o-- "n" Transition
StateMachine "1" o-- "1" Context
Context "n" o-- "1" EntityBuilder
Context "n" o-- "1" Adapter
State "n" -- "n" Transition
Adapter <|-- Memory
Adapter <|-- PDO
Adapter <|-- Session
Loader <|.. PDO
Loader <|.. LoaderArray
Transition *-- Command :creates
Transition *-- Rule : creates
Transition --> Context :uses
AbstractFactory --> StateMachine: creates SM, Adapter, Loader, Context, EntityBuilder


}
@enduml
