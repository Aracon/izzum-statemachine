DONE: ReaderWriterDelegator: backend adapter that only writes history and current state (and does not read the configuration). At the moment we
cannot do this when the definition of the machine is not in the tables
This might need adjustment of tables to relax constraints. we want this because the configuration of the statemachine
could be provided via a yaml file or in the php program itself, but we still would wish to get the current state when 
recreating the statemachine and have a history of transitions in the backend. We could probably reuse the existing PDO adapter
and use it via composition. idea: use a mix and match Loader/Adapter that accepts a loader and a persistance adapter.

- redis backend adapter and loader: needs a data structure
- WON't DO ini file loader: needs a data structure
- DONE: xml loader (which can use a file or string as it's source):  needs a data structure
- WON'T Do: yaml file loader: needs a data structure
- DONE: json loader (which can use a file or json string as it's source): needs a datastructure

- DONE: a way to set closures or callback names on the statemachine for guard check, exit, entry and transition mechanisms. 
this can be done by implementing a dispatch map on the statemachine's current hook methods. we need a nice interface
for doing this. where should we set the callbacks?


- DONE: regular expression matching on state names. this allows us to quickly setup a lot of transitions 
from one state to a lot of other states or from a lot of states to one state. (all with the same guard and transition logic
and with the same event name). eg: 
new Transition(new State("regex:/.*/"), new State("cancel"), 'cancel'); //from all states to cancel
new Transition(new State("regex:/a|b/"), new State("regex:/cancel|done|action.*/"), 'cancel'); //from state a and b to cancel, done and everything that starts with 'action'
